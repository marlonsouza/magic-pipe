name: Automated Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y jq file

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Filter out binary files and select only reviewable files
          reviewable_files=$(echo "$changed_files" | while read -r file; do
            if [ -f "$file" ]; then
              # Check if file is text and not too large (< 1MB)
              if file --mime-type "$file" | grep -q "text/" && [ $(stat --format=%s "$file") -lt 1000000 ]; then
                # Check file extension
                case "$file" in
                  *.py|*.js|*.ts|*.jsx|*.tsx|*.java|*.cpp|*.hpp|*.c|*.h|*.cs|*.php|*.rb|*.go|*.rs|*.swift|*.kt|*.scala|*.m|*.mm)
                    echo "$file"
                    ;;
                esac
              fi
            fi
          done)
          
          # Convert to JSON array
          echo "files=$(echo "$reviewable_files" | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

      - name: Run Code Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          OPENAI_MODEL: 'gpt-3.5-turbo'
        run: |
          mkdir -p reviews
          total_files=$(echo '${{ steps.changed-files.outputs.files }}' | jq '. | length')
          current_file=0
          
          review_file() {
            local file="$1"
            local max_retries=3
            local retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              echo "Reviewing $file (Attempt $((retry_count + 1))/$max_retries)..."
              
              # Get file content and diff safely
              content=$(git show "$PR_HEAD_SHA:$file" 2>/dev/null || echo "")
              if [ -z "$content" ]; then
                echo "‚ö†Ô∏è Warning: Could not read content for $file"
                return 1
              fi
              
              diff=$(git diff "$PR_BASE_SHA" "$PR_HEAD_SHA" -- "$file" 2>/dev/null || echo "")
              
              # Create request file
              request_file="reviews/request_$(basename "$file").json"
              response_file="reviews/response_$(basename "$file").json"
              
              jq -n \
                --arg content "$content" \
                --arg diff "$diff" \
                --arg file_path "$file" \
                '{
                  "type": "completion",
                  "context": {
                    "file_content": $content,
                    "diff": $diff,
                    "file_path": $file_path
                  }
                }' > "$request_file"
              
              echo "" >> "$request_file"
              
              # Send request with timeout
              if timeout 300s python -m src.mcp_server < "$request_file" > "$response_file" 2>/dev/null; then
                # Verify response is valid JSON with a message
                if jq -e '.messages[0].content' "$response" >/dev/null 2>&1; then
                  return 0
                fi
              fi
              
              retry_count=$((retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "Retrying in 5 seconds..."
                sleep 5
              fi
            done
            
            echo "‚ö†Ô∏è Failed to review $file after $max_retries attempts"
            return 1
          }
          
          # Process each file
          for file in $(echo '${{ steps.changed-files.outputs.files }}' | jq -r '.[]'); do
            current_file=$((current_file + 1))
            echo "Processing file $current_file of $total_files: $file"
            
            if [ -f "$file" ]; then
              review_file "$file"
            fi
          done
          
          # Generate final report
          {
            echo "# ü§ñ AI Code Review Report"
            echo ""
            echo "## Overview"
            echo ""
            echo "I've reviewed $total_files file(s) in this pull request."
            echo ""
            
            # Add summary of changes
            echo "## File Reviews"
            echo ""
            
            for response in reviews/response_*.json; do
              if [ -f "$response" ]; then
                file=$(basename "${response#reviews/response_}" .json)
                echo "### üìù \`$file\`"
                echo ""
                if jq -e '.messages[0].content' "$response" >/dev/null 2>&1; then
                  jq -r '.messages[0].content' "$response"
                else
                  echo "‚ö†Ô∏è Error processing review for this file"
                fi
                echo ""
                echo "---"
                echo ""
              fi
            done
            
            
## Additional Information

> üîç **Review Details**
> - This review was automatically generated using AI analysis
> - Each file was analyzed for:
>   - Code quality and best practices
>   - Potential bugs and security issues
>   - Documentation and maintainability
>   - Language-specific considerations
>
> üí° **Have Questions?**
> - Need clarification? Ask in a comment below
> - Want a specific focus? Mention it in your reply
> - The bot will continue monitoring this PR for updates

---
*Generated with ‚ù§Ô∏è by the AI Code Review Bot*
EOF

          }

      - name: Comment on PR
        if: always()  # Run even if previous step had issues
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-file: code_review_output.txt
          edit-mode: replace  # Replace existing comment if it exists