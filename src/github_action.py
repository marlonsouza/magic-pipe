import asyncio
import os
import sys
from src.reviewers.llm_reviewer import LLMReviewer
from git import Repo

def format_review_output(reviews):
    output = "# ü§ñ AI Code Review Report\n\n"
    
    if not reviews:
        output += "No changes detected that require review.\n"
        return output
        
    for review in reviews:
        output += f"## üìù Review for `{review['file_path']}`\n\n"
        output += f"{review['review']}\n\n"
        output += "---\n\n"
        
    output += "\n> üîç _This review was automatically generated by the AI Code Review bot_"
    return output

async def main():
    try:
        # Initialize the reviewer
        reviewer = LLMReviewer()
        
        # Get the repository path from GitHub Actions workspace
        repo_path = os.getenv('GITHUB_WORKSPACE', '.')
        print(f"Using repository path: {repo_path}", file=sys.stderr)
        reviewer.initialize_repo(repo_path)
        
        # Get changed files
        print("Fetching changed files...", file=sys.stderr)
        changes = reviewer.get_changed_files()
        print(f"Found {len(changes)} changed files", file=sys.stderr)
        
        if not changes:
            print(format_review_output([]))
            return
            
        # Process changes and generate reviews
        print("Processing changes...", file=sys.stderr)
        reviews = await reviewer.process_changes(changes)
        
        # Print formatted review output
        print(format_review_output(reviews))
            
    except Exception as e:
        print(f"‚ö†Ô∏è Error during code review: {str(e)}", file=sys.stderr)
        raise

if __name__ == "__main__":
    asyncio.run(main())